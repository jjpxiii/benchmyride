name: Benchmark EVERYTHING !! ‚è±

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          #   python-version: 'graalpy-22.3'
          # python-version: "pypy3.10"
      - uses: actions/setup-node@v4
        with:
          node-version: 24
      - uses: actions/setup-go@v5
        with:
          go-version: "1.25.x"
      - uses: oven-sh/setup-bun@v2
      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
      - uses: mlugg/setup-zig@v2
      - uses: dart-lang/setup-dart@v1
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "9.0.x"

      - name: Install hyperfine
        run: cargo install --locked hyperfine

      - name: build json-serde üèó
        run: cd algorithms/json-serde && cargo build -r && dart pub get && dotnet build --configuration Release

      - name: build native-sort üèó
        run: cd algorithms/native-sort && cargo build -r && dotnet build --configuration Release

      - name: build fibonacci-rec üèó
        run: cd algorithms/fibonacci-rec && rustc -O main_rust.rs && zig build-exe main_zig.zig -O ReleaseFast -fstrip -fsingle-threaded && dotnet build --configuration Release && deno compile -o fibo_deno main.ts

      - name: build regex üèó
        run: cd algorithms/regex && cargo build -r && dotnet build --configuration Release

      - name: warmup json-serde ‚è∞
        run: cd algorithms/json-serde && hyperfine --warmup 3 'deno run -A main.ts canada 13' 'go run main.go'
      - name: bench deno json-serde ‚è∞
        run: cd algorithms/json-serde && hyperfine 'deno run -A main.ts canada 13'
      - name: bench json-serde ! ‚è±
        run: cd algorithms/json-serde && hyperfine './target/release/json-serde canada 13' './bin/Release/net9.0/json' 'deno run -A main.ts canada 13' 'python3 main.py canada 13' 'bun run main_bun.ts' 'dart run main.dart' 'go run main.go' 'node main.mjs'
      # - name: warmup fibonacci-rec ‚è∞
      #   run: cd algorithms/fibonacci-rec && hyperfine --warmup 1 './main_rust' 'go run main.go' 'node main.js' 'deno run main.ts' 'bun main.ts' './main_zig' 'dart run main.dart'
      - name: bench fibonacci-rec ! ‚è±
        run: cd algorithms/fibonacci-rec && hyperfine './main_rust' './bin/Release/net8.0/fibo' 'go run main.go' 'node main.js' 'deno run main.ts' 'bun main.ts' './main_zig' 'dart run main.dart' './fibo_deno'
      # - name: warmup native-sort ‚è∞
      #   run: cd algorithms/native-sort && hyperfine --warmup 1 './target/release/native-sort' 'deno run -A main.ts' 'python3 main.py' 'bun run main_bun.ts' 'dart run main.dart'
      - name: bench native-sort ! ‚è±
        run: cd algorithms/native-sort && hyperfine './target/release/native-sort' './bin/Release/net8.0/sort' 'deno run -A main.ts' 'python3 main.py' 'bun run main_bun.ts' 'dart run main.dart' 'go run main.go' 'node main.mjs'

      - name: bench merge-sort ! ‚è±
        run: cd algorithms/merge-sort && hyperfine 'deno run -A main.ts' 'bun run main_bun.ts' 'node main.mjs'

      - name: bench regex ! ‚è±
        run: cd algorithms/regex && hyperfine './target/release/regexbench' './bin/Release/net8.0/regex' 'deno run -A main_deno.mjs' 'python3 main.py' 'bun run main_bun.mjs' 'dart run main.dart' 'go run main.go' 'node main.mjs'
